// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/alexschexc/bookstore/api/models"
)

// PostInventoryItemsHandlerFunc turns a function with the right signature into a post inventory items handler
type PostInventoryItemsHandlerFunc func(PostInventoryItemsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInventoryItemsHandlerFunc) Handle(params PostInventoryItemsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostInventoryItemsHandler interface for that can handle valid post inventory items params
type PostInventoryItemsHandler interface {
	Handle(PostInventoryItemsParams, *models.Principal) middleware.Responder
}

// NewPostInventoryItems creates a new http.Handler for the post inventory items operation
func NewPostInventoryItems(ctx *middleware.Context, handler PostInventoryItemsHandler) *PostInventoryItems {
	return &PostInventoryItems{Context: ctx, Handler: handler}
}

/*
	PostInventoryItems swagger:route POST /inventory-items postInventoryItems

Create a new Inventory Item
*/
type PostInventoryItems struct {
	Context *middleware.Context
	Handler PostInventoryItemsHandler
}

func (o *PostInventoryItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInventoryItemsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
