// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/alexschexc/bookstore/api/models"
)

// DeleteInventoryItemsIDHandlerFunc turns a function with the right signature into a delete inventory items ID handler
type DeleteInventoryItemsIDHandlerFunc func(DeleteInventoryItemsIDParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteInventoryItemsIDHandlerFunc) Handle(params DeleteInventoryItemsIDParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteInventoryItemsIDHandler interface for that can handle valid delete inventory items ID params
type DeleteInventoryItemsIDHandler interface {
	Handle(DeleteInventoryItemsIDParams, *models.Principal) middleware.Responder
}

// NewDeleteInventoryItemsID creates a new http.Handler for the delete inventory items ID operation
func NewDeleteInventoryItemsID(ctx *middleware.Context, handler DeleteInventoryItemsIDHandler) *DeleteInventoryItemsID {
	return &DeleteInventoryItemsID{Context: ctx, Handler: handler}
}

/*
	DeleteInventoryItemsID swagger:route DELETE /inventory-items/{id} deleteInventoryItemsId

Delete Inventory item by ID
*/
type DeleteInventoryItemsID struct {
	Context *middleware.Context
	Handler DeleteInventoryItemsIDHandler
}

func (o *DeleteInventoryItemsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteInventoryItemsIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
